/**
 * LoadingValidator.js - Validador de Fase de Carregamento/Armazenamento
 * 
 * RESPONSABILIDADE: Validar integridade do armazenamento de dados no IndexedDB
 * PRINC√çPIOS: NO FALLBACKS, NO HARDCODED DATA, Nomenclatura Oficial DIProcessor
 * INTEGRA√á√ÉO: Valida persist√™ncia ap√≥s LoadingValidator armazenar dados
 * 
 * @author Sistema Expertzy - ETL Validation Module
 * @version 1.0.0
 */

import { ConfigLoader } from '@shared/utils/ConfigLoader.js';

export class LoadingValidator {
    constructor() {
        this.validationRules = null;
        this.configsLoaded = false;
        
        console.log('üíæ LoadingValidator: Inicializando validador de carregamento');
        this.loadValidationConfigurations();
    }
    
    /**
     * Carrega configura√ß√µes de valida√ß√£o de carregamento
     * NO HARDCODED DATA: Todas as regras v√™m de arquivos JSON
     */
    async loadValidationConfigurations() {
        try {
            // Carregar regras de valida√ß√£o ETL
            const validationRulesResponse = await fetch(new URL('../../../shared/data/etl-validation/validation-rules.json', import.meta.url));
            if (!validationRulesResponse.ok) {
                throw new Error(`Erro ao carregar validation-rules.json: ${validationRulesResponse.status}`);
            }
            this.validationRules = await validationRulesResponse.json();
            
            if (!this.validationRules) {
                throw new Error('LoadingValidator: Falha ao carregar regras de valida√ß√£o');
            }
            
            this.configsLoaded = true;
            console.log('‚úÖ LoadingValidator: Configura√ß√µes carregadas');
            
        } catch (error) {
            console.error('‚ùå LoadingValidator: Erro ao carregar configura√ß√µes:', error);
            throw new Error(`Falha ao carregar configura√ß√µes: ${error.message}`);
        }
    }
    
    /**
     * Valida carregamento/armazenamento de dados
     * NO FALLBACKS: Todos os par√¢metros obrigat√≥rios
     * 
     * @param {Object} dataToStore - Dados que devem ser armazenados
     * @param {Object} storedData - Dados efetivamente armazenados
     * @param {Object} context - Contexto do carregamento
     * @returns {Object} Resultado da valida√ß√£o
     */
    async validateLoading(dataToStore, storedData, context) {
        // NO FALLBACKS - par√¢metros obrigat√≥rios
        if (!dataToStore) {
            throw new Error('LoadingValidator: dataToStore √© obrigat√≥rio');
        }
        
        if (!storedData) {
            throw new Error('LoadingValidator: storedData √© obrigat√≥rio');
        }
        
        if (!context) {
            throw new Error('LoadingValidator: context √© obrigat√≥rio');
        }
        
        if (!this.configsLoaded) {
            throw new Error('LoadingValidator: Configura√ß√µes n√£o carregadas - aguarde inicializa√ß√£o');
        }
        
        const startTime = Date.now();
        const validationId = `loading_${Date.now()}`;
        
        console.log(`üíæ LoadingValidator: Iniciando valida√ß√£o de carregamento - ID: ${validationId}`);
        
        const result = {
            validationId,
            phase: 'loading',
            timestamp: new Date().toISOString(),
            duration: 0,
            success: true,
            errors: [],
            warnings: [],
            metrics: {
                fieldsStored: 0,
                integrityChecks: 0,
                dataConsistencyChecks: 0,
                storageEfficiency: 0
            }
        };
        
        try {
            // 1. Validar integridade dos dados armazenados
            await this._validateStorageIntegrity(dataToStore, storedData, result);
            
            // 2. Validar preserva√ß√£o de campos cr√≠ticos
            await this._validateCriticalFieldPreservation(dataToStore, storedData, result);
            
            // 3. Validar estrutura de dados no armazenamento
            await this._validateStoredDataStructure(storedData, result);
            
            // 4. Validar metadata de armazenamento
            await this._validateStorageMetadata(storedData, context, result);
            
            // 5. Validar consist√™ncia de √≠ndices (se aplic√°vel)
            await this._validateIndexConsistency(storedData, result);
            
            // 6. Validar limites de armazenamento
            await this._validateStorageLimits(storedData, result);
            
            // 7. Validar contexto de carregamento
            await this._validateLoadingContext(context, result);
            
            // Calcular m√©tricas de efici√™ncia
            this._calculateStorageMetrics(dataToStore, storedData, result);
            
            result.duration = Date.now() - startTime;
            
            if (result.success) {
                console.log(`‚úÖ LoadingValidator: Valida√ß√£o conclu√≠da com sucesso em ${result.duration}ms`);
            } else {
                console.error(`‚ùå LoadingValidator: Valida√ß√£o falhou com ${result.errors.length} erros`);
            }
            
        } catch (error) {
            result.success = false;
            result.duration = Date.now() - startTime;
            result.errors.push({
                type: 'LOADING_VALIDATION_SYSTEM_ERROR',
                message: `Erro cr√≠tico na valida√ß√£o de carregamento: ${error.message}`,
                timestamp: new Date().toISOString()
            });
            
            console.error('‚ùå LoadingValidator: Erro cr√≠tico:', error);
        }
        
        return result;
    }
    
    /**
     * Valida integridade geral do armazenamento
     * NO FALLBACKS: Dados devem ser id√™nticos ap√≥s armazenamento
     * 
     * @private
     */
    async _validateStorageIntegrity(dataToStore, storedData, result) {
        if (!dataToStore) {
            throw new Error('_validateStorageIntegrity: dataToStore √© obrigat√≥rio');
        }
        
        if (!storedData) {
            throw new Error('_validateStorageIntegrity: storedData √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_validateStorageIntegrity: result √© obrigat√≥rio');
        }
        
        result.metrics.integrityChecks++;
        
        // Validar que dados b√°sicos foram preservados
        if (typeof dataToStore !== typeof storedData) {
            result.success = false;
            result.errors.push({
                type: 'STORAGE_TYPE_MISMATCH',
                message: 'Tipo de dados alterado no armazenamento',
                expectedType: typeof dataToStore,
                storedType: typeof storedData
            });
            return;
        }
        
        // Validar estrutura b√°sica
        if (typeof dataToStore === 'object' && dataToStore !== null) {
            const originalKeys = Object.keys(dataToStore);
            const storedKeys = Object.keys(storedData);
            
            // Verificar chaves perdidas
            const lostKeys = originalKeys.filter(key => !storedKeys.includes(key));
            if (lostKeys.length > 0) {
                result.success = false;
                result.errors.push({
                    type: 'STORAGE_KEYS_LOST',
                    message: `Chaves perdidas no armazenamento: ${lostKeys.join(', ')}`,
                    lostKeys: lostKeys
                });
            }
            
            // Verificar chaves adicionadas inesperadamente
            const addedKeys = storedKeys.filter(key => !originalKeys.includes(key) && !key.startsWith('_')); // Ignorar campos internos
            if (addedKeys.length > 0) {
                result.warnings.push({
                    type: 'UNEXPECTED_STORAGE_KEYS',
                    message: `Chaves adicionadas no armazenamento: ${addedKeys.join(', ')}`,
                    addedKeys: addedKeys
                });
            }
        }
    }
    
    /**
     * Valida preserva√ß√£o de campos cr√≠ticos
     * NO FALLBACKS: Campos cr√≠ticos n√£o podem ser perdidos ou alterados
     * 
     * @private
     */
    async _validateCriticalFieldPreservation(dataToStore, storedData, result) {
        if (!dataToStore) {
            throw new Error('_validateCriticalFieldPreservation: dataToStore √© obrigat√≥rio');
        }
        
        if (!storedData) {
            throw new Error('_validateCriticalFieldPreservation: storedData √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_validateCriticalFieldPreservation: result √© obrigat√≥rio');
        }
        
        // Campos cr√≠ticos que devem ser preservados exatamente
        const criticalFields = ['numero_di', 'importador_cnpj', 'data_registro'];
        
        for (const field of criticalFields) {
            if (dataToStore[field] !== undefined) {
                result.metrics.fieldsStored++;
                
                if (storedData[field] === undefined) {
                    result.success = false;
                    result.errors.push({
                        type: 'CRITICAL_FIELD_NOT_STORED',
                        message: `Campo cr√≠tico n√£o foi armazenado: ${field}`,
                        field: field,
                        originalValue: dataToStore[field]
                    });
                } else if (dataToStore[field] !== storedData[field]) {
                    // Para datas, validar com toler√¢ncia
                    if (field === 'data_registro' && this._areDatesEquivalent(dataToStore[field], storedData[field])) {
                        continue; // Datas s√£o equivalentes
                    }
                    
                    result.success = false;
                    result.errors.push({
                        type: 'CRITICAL_FIELD_ALTERED_IN_STORAGE',
                        message: `Campo cr√≠tico alterado no armazenamento: ${field}`,
                        field: field,
                        originalValue: dataToStore[field],
                        storedValue: storedData[field]
                    });
                }
            }
        }
        
        // Validar adi√ß√µes foram preservadas
        if (dataToStore.adicoes && Array.isArray(dataToStore.adicoes)) {
            result.metrics.dataConsistencyChecks++;
            
            if (!storedData.adicoes || !Array.isArray(storedData.adicoes)) {
                result.success = false;
                result.errors.push({
                    type: 'ADDITIONS_NOT_STORED_PROPERLY',
                    message: 'Adi√ß√µes n√£o foram armazenadas como array',
                    originalCount: dataToStore.adicoes.length,
                    storedType: typeof storedData.adicoes
                });
            } else if (dataToStore.adicoes.length !== storedData.adicoes.length) {
                result.success = false;
                result.errors.push({
                    type: 'ADDITIONS_COUNT_MISMATCH_STORAGE',
                    message: 'N√∫mero de adi√ß√µes alterado no armazenamento',
                    originalCount: dataToStore.adicoes.length,
                    storedCount: storedData.adicoes.length
                });
            }
        }
    }
    
    /**
     * Valida estrutura dos dados armazenados
     * NO FALLBACKS: Estrutura deve estar conforme esperado
     * 
     * @private
     */
    async _validateStoredDataStructure(storedData, result) {
        if (!storedData) {
            throw new Error('_validateStoredDataStructure: storedData √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_validateStoredDataStructure: result √© obrigat√≥rio');
        }
        
        result.metrics.integrityChecks++;
        
        // Validar que dados armazenados s√£o objeto
        if (typeof storedData !== 'object' || storedData === null) {
            result.success = false;
            result.errors.push({
                type: 'INVALID_STORED_DATA_STRUCTURE',
                message: 'Dados armazenados devem ser objeto n√£o-nulo',
                storedType: typeof storedData
            });
            return;
        }
        
        // Validar campos obrigat√≥rios do IndexedDB
        const requiredStoredFields = this.validationRules.campos_obrigatorios.di_basica;
        
        for (const field of requiredStoredFields) {
            if (storedData[field] === undefined || storedData[field] === null) {
                result.success = false;
                result.errors.push({
                    type: 'REQUIRED_FIELD_NOT_STORED',
                    message: `Campo obrigat√≥rio n√£o armazenado: ${field}`,
                    field: field
                });
            }
        }
        
        // Validar estrutura de adi√ß√µes no armazenamento
        if (storedData.adicoes) {
            if (!Array.isArray(storedData.adicoes)) {
                result.success = false;
                result.errors.push({
                    type: 'STORED_ADDITIONS_INVALID_TYPE',
                    message: 'Adi√ß√µes armazenadas devem ser array',
                    storedType: typeof storedData.adicoes
                });
            } else {
                // Validar cada adi√ß√£o armazenada
                for (let i = 0; i < storedData.adicoes.length; i++) {
                    const adicao = storedData.adicoes[i];
                    
                    if (!adicao || typeof adicao !== 'object') {
                        result.success = false;
                        result.errors.push({
                            type: 'STORED_ADDITION_INVALID_STRUCTURE',
                            message: `Adi√ß√£o ${i + 1} armazenada com estrutura inv√°lida`,
                            additionIndex: i,
                            storedType: typeof adicao
                        });
                    }
                }
            }
        }
    }
    
    /**
     * Valida metadata de armazenamento
     * NO FALLBACKS: Metadata deve conter informa√ß√µes de auditoria
     * 
     * @private
     */
    async _validateStorageMetadata(storedData, context, result) {
        if (!storedData) {
            throw new Error('_validateStorageMetadata: storedData √© obrigat√≥rio');
        }
        
        if (!context) {
            throw new Error('_validateStorageMetadata: context √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_validateStorageMetadata: result √© obrigat√≥rio');
        }
        
        // Validar presen√ßa de metadata de armazenamento
        if (!storedData._metadata) {
            result.warnings.push({
                type: 'STORAGE_METADATA_MISSING',
                message: 'Metadata de armazenamento ausente - dificulta auditoria'
            });
            return;
        }
        
        const metadata = storedData._metadata;
        
        // Validar timestamp de armazenamento
        if (!metadata.storedAt) {
            result.warnings.push({
                type: 'STORAGE_TIMESTAMP_MISSING',
                message: 'Timestamp de armazenamento ausente no metadata'
            });
        } else {
            const storedDate = new Date(metadata.storedAt);
            if (isNaN(storedDate.getTime())) {
                result.errors.push({
                    type: 'INVALID_STORAGE_TIMESTAMP',
                    message: 'Timestamp de armazenamento inv√°lido',
                    timestamp: metadata.storedAt
                });
            }
        }
        
        // Validar vers√£o do sistema no metadata
        if (!metadata.systemVersion) {
            result.warnings.push({
                type: 'SYSTEM_VERSION_NOT_STORED',
                message: 'Vers√£o do sistema n√£o registrada no metadata'
            });
        }
        
        // Validar contexto foi preservado
        if (context.storageId && metadata.storageId !== context.storageId) {
            result.errors.push({
                type: 'STORAGE_ID_MISMATCH',
                message: 'ID de armazenamento n√£o corresponde ao contexto',
                contextId: context.storageId,
                metadataId: metadata.storageId
            });
        }
    }
    
    /**
     * Valida consist√™ncia de √≠ndices (se aplic√°vel)
     * NO FALLBACKS: √çndices devem estar consistentes
     * 
     * @private
     */
    async _validateIndexConsistency(storedData, result) {
        if (!storedData) {
            throw new Error('_validateIndexConsistency: storedData √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_validateIndexConsistency: result √© obrigat√≥rio');
        }
        
        result.metrics.integrityChecks++;
        
        // Validar que campos index√°veis est√£o presentes
        const indexedFields = ['numero_di', 'importador_cnpj', 'data_registro'];
        
        for (const field of indexedFields) {
            if (storedData[field] !== undefined) {
                // Validar formato para indexa√ß√£o
                if (field === 'numero_di' && typeof storedData[field] !== 'string') {
                    result.warnings.push({
                        type: 'INDEX_FIELD_TYPE_WARNING',
                        message: `Campo indexado com tipo inesperado: ${field}`,
                        field: field,
                        expectedType: 'string',
                        actualType: typeof storedData[field]
                    });
                }
                
                if (field === 'importador_cnpj' && typeof storedData[field] !== 'string') {
                    result.warnings.push({
                        type: 'INDEX_FIELD_TYPE_WARNING',
                        message: `Campo indexado com tipo inesperado: ${field}`,
                        field: field,
                        expectedType: 'string',
                        actualType: typeof storedData[field]
                    });
                }
            }
        }
        
        // Validar que n√£o h√° valores duplicados em campos √∫nicos
        if (storedData.numero_di && typeof storedData.numero_di === 'string') {
            if (storedData.numero_di.trim() === '') {
                result.errors.push({
                    type: 'UNIQUE_INDEX_FIELD_EMPTY',
                    message: 'Campo de √≠ndice √∫nico est√° vazio: numero_di',
                    field: 'numero_di'
                });
            }
        }
    }
    
    /**
     * Valida limites de armazenamento
     * NO HARDCODED DATA: Limites v√™m da configura√ß√£o
     * 
     * @private
     */
    async _validateStorageLimits(storedData, result) {
        if (!storedData) {
            throw new Error('_validateStorageLimits: storedData √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_validateStorageLimits: result √© obrigat√≥rio');
        }
        
        // Estimar tamanho dos dados armazenados
        const dataSize = JSON.stringify(storedData).length;
        const maxSize = this.validationRules.limites_processamento.tamanho_maximo_dados;
        const warningSize = this.validationRules.limites_processamento.tamanho_aviso_dados;
        
        if (dataSize > maxSize) {
            result.success = false;
            result.errors.push({
                type: 'STORAGE_SIZE_LIMIT_EXCEEDED',
                message: this.validationRules.mensagens_erro.limite_dados_excedido
                    .replace('{tamanho}', Math.round(dataSize / 1024) + 'KB')
                    .replace('{limite}', Math.round(maxSize / 1024) + 'KB'),
                dataSize: dataSize,
                maxSize: maxSize
            });
        } else if (dataSize > warningSize) {
            result.warnings.push({
                type: 'STORAGE_SIZE_WARNING',
                message: this.validationRules.mensagens_erro.dados_grandes_aviso
                    .replace('{tamanho}', Math.round(dataSize / (1024 * 1024))),
                dataSize: dataSize
            });
        }
        
        // Validar limite de adi√ß√µes
        if (storedData.adicoes && Array.isArray(storedData.adicoes)) {
            const maxAdditions = this.validationRules.limites_processamento.max_adicoes_por_di;
            
            if (storedData.adicoes.length > maxAdditions) {
                result.warnings.push({
                    type: 'STORED_ADDITIONS_LIMIT_WARNING',
                    message: `N√∫mero de adi√ß√µes armazenadas pr√≥ximo do limite: ${storedData.adicoes.length}/${maxAdditions}`,
                    storedCount: storedData.adicoes.length,
                    maxAllowed: maxAdditions
                });
            }
        }
    }
    
    /**
     * Valida contexto de carregamento
     * NO FALLBACKS: Context deve conter informa√ß√µes sobre armazenamento
     * 
     * @private
     */
    async _validateLoadingContext(context, result) {
        if (!context) {
            throw new Error('_validateLoadingContext: context √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_validateLoadingContext: result √© obrigat√≥rio');
        }
        
        // Validar que contexto indica opera√ß√£o de carregamento
        if (!context.operation || context.operation !== 'loading') {
            result.warnings.push({
                type: 'LOADING_OPERATION_NOT_SPECIFIED',
                message: 'Opera√ß√£o de carregamento n√£o especificada no contexto',
                operation: context.operation
            });
        }
        
        // Validar se carregamento foi bem-sucedido no contexto
        if (context.loadingSuccess !== undefined && context.loadingSuccess === false) {
            result.success = false;
            result.errors.push({
                type: 'LOADING_CONTEXT_FAILURE',
                message: 'Context indica falha no carregamento de dados',
                context: context
            });
        }
        
        // Validar origem do armazenamento
        if (!context.storageTarget) {
            result.warnings.push({
                type: 'STORAGE_TARGET_NOT_SPECIFIED',
                message: 'Target de armazenamento n√£o especificado no contexto'
            });
        }
    }
    
    /**
     * Calcula m√©tricas de efici√™ncia de armazenamento
     * NO FALLBACKS: M√©tricas baseadas apenas em dados v√°lidos
     * 
     * @private
     */
    _calculateStorageMetrics(dataToStore, storedData, result) {
        if (!dataToStore) {
            throw new Error('_calculateStorageMetrics: dataToStore √© obrigat√≥rio');
        }
        
        if (!storedData) {
            throw new Error('_calculateStorageMetrics: storedData √© obrigat√≥rio');
        }
        
        if (!result) {
            throw new Error('_calculateStorageMetrics: result √© obrigat√≥rio');
        }
        
        // Calcular efici√™ncia de armazenamento
        const originalSize = JSON.stringify(dataToStore).length;
        const storedSize = JSON.stringify(storedData).length;
        
        if (originalSize === 0) {
            result.metrics.storageEfficiency = 0;
        } else {
            // Efici√™ncia = qu√£o pr√≥ximo o tamanho armazenado est√° do original (100% = igual)
            result.metrics.storageEfficiency = Math.round((Math.min(originalSize, storedSize) / Math.max(originalSize, storedSize)) * 100);
        }
        
        // M√©tricas adicionais
        result.metrics.originalSize = originalSize;
        result.metrics.storedSize = storedSize;
        result.metrics.compressionRatio = originalSize > 0 ? Math.round((storedSize / originalSize) * 100) : 100;
    }
    
    /**
     * Verifica se duas datas s√£o equivalentes (toler√¢ncia para formatos diferentes)
     * NO FALLBACKS: Valida√ß√£o rigorosa de equival√™ncia
     * 
     * @private
     */
    _areDatesEquivalent(date1, date2) {
        if (!date1 || !date2) return false;
        
        try {
            const d1 = new Date(date1);
            const d2 = new Date(date2);
            
            if (isNaN(d1.getTime()) || isNaN(d2.getTime())) {
                return false;
            }
            
            // Toler√¢ncia de 1 segundo para diferen√ßas de serializa√ß√£o
            return Math.abs(d1.getTime() - d2.getTime()) < 1000;
            
        } catch (error) {
            return false;
        }
    }
}

export default LoadingValidator;