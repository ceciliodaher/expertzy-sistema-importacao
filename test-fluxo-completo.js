/**
 * Script de Teste do Fluxo Completo
 * Valida a refatora√ß√£o arquitetural SOLID
 * 
 * Fluxo testado:
 * 1. Processar XML com DIProcessor
 * 2. Calcular impostos com ComplianceCalculator (salvando no IndexedDB)
 * 3. Gerar relat√≥rios com exportadores (lendo do IndexedDB)
 */

import DIProcessor from './src/core/processors/DIProcessor.js';
import { ComplianceCalculator } from './src/core/calculators/ComplianceCalculator.js';
import { CroquiNFExporter } from './src/core/exporters/CroquiNFExporter.js';
import ExcelExporter from './src/core/exporters/ExcelExporter.js';
import IndexedDBManager from './src/services/db/IndexedDBManager.js';
import fs from 'fs/promises';

async function testarFluxoCompleto() {
    console.log('üöÄ Iniciando teste do fluxo completo SOLID...\n');
    
    try {
        // 1. PROCESSAR XML
        console.log('üìÑ FASE 1: Processando XML...');
        const xmlPath = './uploads/2518173187.xml';
        const xmlContent = await fs.readFile(xmlPath, 'utf-8');
        
        const diProcessor = new DIProcessor();
        await diProcessor.initialize();
        const dadosDI = await diProcessor.processXML(xmlContent);
        
        if (!dadosDI.numero_di) {
            throw new Error('N√∫mero da DI n√£o encontrado no XML processado');
        }
        
        console.log(`‚úÖ XML processado - DI: ${dadosDI.numero_di}`);
        console.log(`   Adi√ß√µes: ${dadosDI.adicoes.length}`);
        console.log(`   Importador: ${dadosDI.importador.nome}\n`);
        
        // 2. CALCULAR IMPOSTOS E SALVAR NO INDEXEDDB
        console.log('üí∞ FASE 2: Calculando impostos...');
        const calculator = new ComplianceCalculator();
        await calculator.loadConfigurations();
        calculator.setEstadoDestino('SP');
        
        const calculos = await calculator.calcularImpostos(dadosDI);
        
        console.log(`‚úÖ Impostos calculados e salvos no IndexedDB`);
        console.log(`   II: R$ ${calculos.impostos.ii.valor_devido.toFixed(2)}`);
        console.log(`   IPI: R$ ${calculos.impostos.ipi.valor_devido.toFixed(2)}`);
        console.log(`   PIS: R$ ${calculos.impostos.pis.valor_devido.toFixed(2)}`);
        console.log(`   COFINS: R$ ${calculos.impostos.cofins.valor_devido.toFixed(2)}`);
        console.log(`   ICMS: R$ ${calculos.impostos.icms.valor_devido.toFixed(2)}`);
        
        // Verificar se foi salvo no IndexedDB
        const dbManager = IndexedDBManager.getInstance();
        const dadosDB = await dbManager.getDI(dadosDI.numero_di);
        
        if (!dadosDB) {
            throw new Error('Dados n√£o foram salvos no IndexedDB!');
        }
        
        if (!dadosDB.totais_relatorio) {
            throw new Error('totais_relatorio n√£o foi salvo no IndexedDB!');
        }
        
        if (!dadosDB.totais_por_coluna) {
            throw new Error('totais_por_coluna n√£o foi salvo no IndexedDB!');
        }
        
        console.log(`‚úÖ Dados verificados no IndexedDB\n`);
        
        // 3. GERAR RELAT√ìRIOS (LENDO DO INDEXEDDB)
        console.log('üìä FASE 3: Gerando relat√≥rios...');
        
        // Testar CroquiNFExporter
        console.log('   Testando CroquiNFExporter...');
        const croquiExporter = new CroquiNFExporter(dadosDI);
        
        // O exportador deve carregar dados do IndexedDB automaticamente
        await croquiExporter.loadCalculatedData();
        
        // Verificar se carregou os totais
        if (!croquiExporter.calculos || !croquiExporter.calculos.totais_relatorio) {
            throw new Error('CroquiNFExporter n√£o carregou totais_relatorio do IndexedDB!');
        }
        
        console.log(`   ‚úÖ CroquiNFExporter carregou dados do IndexedDB`);
        
        // Testar ExcelExporter
        console.log('   Testando ExcelExporter...');
        const excelExporter = new ExcelExporter();
        
        await excelExporter.loadCalculatedData(dadosDI.numero_di);
        
        if (!excelExporter.calculos || !excelExporter.calculos.totais_por_coluna) {
            throw new Error('ExcelExporter n√£o carregou totais_por_coluna do IndexedDB!');
        }
        
        console.log(`   ‚úÖ ExcelExporter carregou dados do IndexedDB\n`);
        
        // 4. VALIDAR SEPARA√á√ÉO DE RESPONSABILIDADES
        console.log('üîç FASE 4: Validando arquitetura SOLID...');
        
        // Verificar que exportadores n√£o t√™m mais m√©todos de c√°lculo
        if (typeof croquiExporter.prepareTotais === 'function') {
            const totais = croquiExporter.prepareTotais();
            // Se n√£o lan√ßar erro, est√° correto (apenas l√™, n√£o calcula)
            console.log('   ‚úÖ CroquiNFExporter.prepareTotais() apenas l√™ dados (n√£o calcula)');
        }
        
        if (typeof excelExporter.calculateTotalsByColumn === 'function') {
            try {
                // Deve lan√ßar erro se n√£o tiver dados
                const totais = excelExporter.calculateTotalsByColumn([]);
            } catch (error) {
                console.log('   ‚úÖ ExcelExporter.calculateTotalsByColumn() lan√ßa erro sem dados (n√£o calcula)');
            }
        }
        
        console.log('\n' + '='.repeat(60));
        console.log('üéâ TESTE COMPLETO COM SUCESSO!');
        console.log('='.repeat(60));
        console.log('‚úÖ XML processado corretamente');
        console.log('‚úÖ Impostos calculados e salvos no IndexedDB');
        console.log('‚úÖ Exportadores leem dados do IndexedDB (n√£o calculam)');
        console.log('‚úÖ Arquitetura SOLID aplicada com sucesso');
        console.log('='.repeat(60));
        
    } catch (error) {
        console.error('\n‚ùå ERRO NO TESTE:', error.message);
        console.error(error);
        process.exit(1);
    }
}

// Executar teste
testarFluxoCompleto().catch(console.error);